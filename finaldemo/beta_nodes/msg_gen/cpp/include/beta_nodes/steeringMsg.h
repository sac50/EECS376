/* Auto-generated by genmsg_cpp for file /home/jinx/ROSCode/beta_nodes/msg/steeringMsg.msg */
#ifndef BETA_NODES_MESSAGE_STEERINGMSG_H
#define BETA_NODES_MESSAGE_STEERINGMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace beta_nodes
{
template <class ContainerAllocator>
struct steeringMsg_ {
  typedef steeringMsg_<ContainerAllocator> Type;

  steeringMsg_()
  : header()
  , omega_cmd(0.0)
  , posX(0.0)
  , posY(0.0)
  , heading(0.0)
  , priority_approach(false)
  {
  }

  steeringMsg_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , omega_cmd(0.0)
  , posX(0.0)
  , posY(0.0)
  , heading(0.0)
  , priority_approach(false)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _omega_cmd_type;
  float omega_cmd;

  typedef float _posX_type;
  float posX;

  typedef float _posY_type;
  float posY;

  typedef float _heading_type;
  float heading;

  typedef uint8_t _priority_approach_type;
  uint8_t priority_approach;


private:
  static const char* __s_getDataType_() { return "beta_nodes/steeringMsg"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ba43803979c1f32a814a2b178a9b194b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
float32 omega_cmd\n\
float32 posX\n\
float32 posY\n\
float32 heading\n\
bool priority_approach # to raise the priority when far enough away to warrant perpindicular approach\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, omega_cmd);
    ros::serialization::serialize(stream, posX);
    ros::serialization::serialize(stream, posY);
    ros::serialization::serialize(stream, heading);
    ros::serialization::serialize(stream, priority_approach);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, omega_cmd);
    ros::serialization::deserialize(stream, posX);
    ros::serialization::deserialize(stream, posY);
    ros::serialization::deserialize(stream, heading);
    ros::serialization::deserialize(stream, priority_approach);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(omega_cmd);
    size += ros::serialization::serializationLength(posX);
    size += ros::serialization::serializationLength(posY);
    size += ros::serialization::serializationLength(heading);
    size += ros::serialization::serializationLength(priority_approach);
    return size;
  }

  typedef boost::shared_ptr< ::beta_nodes::steeringMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beta_nodes::steeringMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct steeringMsg
typedef  ::beta_nodes::steeringMsg_<std::allocator<void> > steeringMsg;

typedef boost::shared_ptr< ::beta_nodes::steeringMsg> steeringMsgPtr;
typedef boost::shared_ptr< ::beta_nodes::steeringMsg const> steeringMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::beta_nodes::steeringMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::beta_nodes::steeringMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace beta_nodes

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::beta_nodes::steeringMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::beta_nodes::steeringMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::beta_nodes::steeringMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ba43803979c1f32a814a2b178a9b194b";
  }

  static const char* value(const  ::beta_nodes::steeringMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xba43803979c1f32aULL;
  static const uint64_t static_value2 = 0x814a2b178a9b194bULL;
};

template<class ContainerAllocator>
struct DataType< ::beta_nodes::steeringMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beta_nodes/steeringMsg";
  }

  static const char* value(const  ::beta_nodes::steeringMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::beta_nodes::steeringMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32 omega_cmd\n\
float32 posX\n\
float32 posY\n\
float32 heading\n\
bool priority_approach # to raise the priority when far enough away to warrant perpindicular approach\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::beta_nodes::steeringMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::beta_nodes::steeringMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::beta_nodes::steeringMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::beta_nodes::steeringMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.omega_cmd);
    stream.next(m.posX);
    stream.next(m.posY);
    stream.next(m.heading);
    stream.next(m.priority_approach);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct steeringMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beta_nodes::steeringMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::beta_nodes::steeringMsg_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "omega_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.omega_cmd);
    s << indent << "posX: ";
    Printer<float>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<float>::stream(s, indent + "  ", v.posY);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "priority_approach: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.priority_approach);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BETA_NODES_MESSAGE_STEERINGMSG_H

