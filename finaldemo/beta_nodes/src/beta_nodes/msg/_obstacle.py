"""autogenerated by genmsg_py from obstacle.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg

class obstacle(roslib.message.Message):
  _md5sum = "2b6640e54f0c0b7b92e8fbb9f966bfe0"
  _type = "beta_nodes/obstacle"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# laswer sweeps from the right(0) to left (180)

float32 boxWidth = 0.3 # HALVED. remember, robot teack is ~.56, so make this a little over half of that
float32 boxLength = 1.6

float32 leftClearance  # distance to ping furthest on our right (would be 180 if we checked all of them)
float32 rightClearance # distance to ping furthest on our right (would be 180 if we checked all of them)
float32 threatRange = 1.0 # Range inwhich if we've hit an object we need to consider replanning

float32 nearestObstacle
uint8 nearestTheta

float32 edgeDistance
uint8 edgeTheta

uint8 firstObstacleTheta ##should be rightmost obstacle ping
uint8 lastObstacleTheta

bool obstacle

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  # Pseudo-constants
  boxWidth = 0.3
  boxLength = 1.6
  threatRange = 1.0

  __slots__ = ['header','leftClearance','rightClearance','nearestObstacle','nearestTheta','edgeDistance','edgeTheta','firstObstacleTheta','lastObstacleTheta','obstacle']
  _slot_types = ['Header','float32','float32','float32','uint8','float32','uint8','uint8','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,leftClearance,rightClearance,nearestObstacle,nearestTheta,edgeDistance,edgeTheta,firstObstacleTheta,lastObstacleTheta,obstacle
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(obstacle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.leftClearance is None:
        self.leftClearance = 0.
      if self.rightClearance is None:
        self.rightClearance = 0.
      if self.nearestObstacle is None:
        self.nearestObstacle = 0.
      if self.nearestTheta is None:
        self.nearestTheta = 0
      if self.edgeDistance is None:
        self.edgeDistance = 0.
      if self.edgeTheta is None:
        self.edgeTheta = 0
      if self.firstObstacleTheta is None:
        self.firstObstacleTheta = 0
      if self.lastObstacleTheta is None:
        self.lastObstacleTheta = 0
      if self.obstacle is None:
        self.obstacle = False
    else:
      self.header = std_msgs.msg._Header.Header()
      self.leftClearance = 0.
      self.rightClearance = 0.
      self.nearestObstacle = 0.
      self.nearestTheta = 0
      self.edgeDistance = 0.
      self.edgeTheta = 0
      self.firstObstacleTheta = 0
      self.lastObstacleTheta = 0
      self.obstacle = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3fBf4B.pack(_x.leftClearance, _x.rightClearance, _x.nearestObstacle, _x.nearestTheta, _x.edgeDistance, _x.edgeTheta, _x.firstObstacleTheta, _x.lastObstacleTheta, _x.obstacle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.leftClearance, _x.rightClearance, _x.nearestObstacle, _x.nearestTheta, _x.edgeDistance, _x.edgeTheta, _x.firstObstacleTheta, _x.lastObstacleTheta, _x.obstacle,) = _struct_3fBf4B.unpack(str[start:end])
      self.obstacle = bool(self.obstacle)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3fBf4B.pack(_x.leftClearance, _x.rightClearance, _x.nearestObstacle, _x.nearestTheta, _x.edgeDistance, _x.edgeTheta, _x.firstObstacleTheta, _x.lastObstacleTheta, _x.obstacle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.leftClearance, _x.rightClearance, _x.nearestObstacle, _x.nearestTheta, _x.edgeDistance, _x.edgeTheta, _x.firstObstacleTheta, _x.lastObstacleTheta, _x.obstacle,) = _struct_3fBf4B.unpack(str[start:end])
      self.obstacle = bool(self.obstacle)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3fBf4B = struct.Struct("<3fBf4B")
